webrocket(7)
============

NAME
----
webrocket - The WebRocket server core library

SYNOPSIS
--------
`import "webrocket"`

DESCRIPTION
-----------
This Go language library contains the core functionality of the
WebRocket server. The *webrocket-server*(1) implements a ready to
use server application based on the *webrocket*(7) library.

ARCHITECTURE
------------
WebRocket is a hybrid of 2 interfaces: the 'WebSockets server' and
the 'MQ exchange server'. In the middle, everything is tied with
internal channels, which allows for easy clustering and hence
horizontal scalability.

VHost
~~~~~
Also because of horizontal scalability goals, the server has been
divided into independent 'vhosts'. Speaking shortly, 'vhost' is just
a request handler defined for specified path on the server, eg.
vhost '/world' defined on the server bound to 'hello.com:9772'
is just a websockets endpoint at 'ws://hello.com:9772/world'.

Each 'vhost' is fully independent from the others, defines its
own 'channels' and 'users', and allows for specific permissions
management.

Channel
~~~~~~~
WebRocket 'channels' are used for broadcasting information across many
clients. Each 'channel' allows users to connect and subscribe its
activity.

User
~~~~
The 'user' is defined within 'vhost', so the same user names can
be duplicated in the server instance. User permissions can be
combined from three rights: 'READ', 'WRITE' and 'MANAGE'.

Bidirectional connection
~~~~~~~~~~~~~~~~~~~~~~~~
WebRocket bridge keeps distributed, bidirectional connection between the
browser and the backend instances using combination of the 'WebSockets
server' and 'the ZeroMQ exchange', connected by internal channels.

The following schema explains it more accurately:

-----
 
    +---------+                    +-------------------+
    | Browser | <----------------> |                   |
    +---------+     WEBSOCKETS     | WebSockets SERVER |
    | Browser | <----------------> |                   |          +---------+
    +---------+                    +---------|---------+ )------> | Logging |
    +---------+                    |  ZeroMQ EXCHANGE  |          +---------+
                                   +-------------------+
                    +---------+              ^
                    | +---------+            |
                    +-| BACKEND | <----------+
                      +---------+

-----

WEBSOCKETS SERVER
-----------------
The WebSockets server handles communication with the clients
(browsers) over the HTML5WebSockets protocol. This layer implements
simple JSON-based API for communicating with the clients.

Session
~~~~~~~
When the connection is successfully established, server sends
the 'connected' event to the client, which contains an unique
session id ('sid'):

	{"connected": {"sid": "session-id"}}

Messages format
~~~~~~~~~~~~~~~
All standard messages are in the following format:

	{"event-name": "data", "_id": "message-id"}

Where 'data' type can be any of `string`, `bool` or `hash`.
When speaking about the server, 'event' refers to supported internal
operation requested by the client.

The '_id' is generated by the client and it should be just sequential
number of the outgoing message.

Success responses
~~~~~~~~~~~~~~~~~
When message sent by the client has been successfully processed, then
the server sents acknowledge information to the client. The success
response format is the same for all events:

	{"ok": true, "_id": "message-id"}
	
Errors handling
~~~~~~~~~~~~~~~
When error occurs, then server sends special error message to the client.
Error message's payload always contains the error identification code.
if error occured while processing an incoming message, then contains
the message '_id' as well.

	{"err": "ERROR_ID", "_id": "message-id"}

WEBSOCKETS SERVER EVENTS
------------------------
Here's the full list of events supported by the WebSockets layer.
	
AUTHENTICATE
~~~~~~~~~~~~
Authenticates session for the specified user. 

Example
^^^^^^^
	{"authenticate": {"user": "joe", "secret": "53cr37"}, "_id": "..."}

Payload
^^^^^^^
[horizontal]
'user'::   name of the configured user you want to authenticate (required)
'secret':: authentication secret for specified user (optional)

Errors
^^^^^^
[horizontal]
`INVALID_CREDENTIALS`:: given secret is invalid
`USER_NOT_FOUND`::      given user does not exist
`INVALID_USER_NAME`::   no username given or its format is invalid
`INVALID_PAYLOAD`::     data format is invalid

SUBSCRIBE
~~~~~~~~~
Subscribes client to the specified channel.

Example
^^^^^^^
	{"subscribe": {"channel": "hello"}, "_id": "..."}

Payload
^^^^^^^
[horizontal]
'channel':: name of the channel you want to subscribe, not existing
			channels are created automatically (required)

Errors
^^^^^^
[horizontal]
`INVALID_CHANNEL_NAME`:: no channel name given or when given name is invalid
`ACCESS_DENIED`::        current session is not authenticated for reading
`INVALID_PAYLOAD`::      payload format is invalid

UNSUBSCRIBE
~~~~~~~~~~~
Unsubscribes client from the specified channnel.

Example
^^^^^^^
	{"unsubscribe": {"channel": "hello"}, "_id": "..."}

Payload
^^^^^^^
[horizontal]
'channel':: name of the channel you want to unsubscribe (required)

Errors
^^^^^^
[horizontal]
`INVALID_CHANNEL_NAME`:: no channel name given or when given name is invalid
`CHANNEL_NOT_FOUND`::    given channel doesn't exist
`ACCESS_DENIED`::        current session is not authenticated for reading
`INVALID_PAYLOAD`::      payload format is invalid

BROADCAST
~~~~~~~~~
Broadcasts and triggers client events with specified data on given channels.

Example
^^^^^^^
	{"broadcast": {"event": "hello", "channel": "world", data: {"x": 1}}, "_id": "..."}

Payload
^^^^^^^
[horizontal]
'event'::   name of the event which will be triggerred on the client side (required)
'channel':: channel have to exist (required)
'data'::    data to publish (optional)

Errors
^^^^^^
[horizontal]
`INVALID_EVENT_NAME`::   no event name given or its format is invalid
`INVALID_CHANNEL_NAME`:: no channel name given or its format is invalid
`CHANNEL_NOT_FOUND`::    given channel doesn't exist
`ACCESS_DENIED`::        current session is not authenticated for writing
`INVALID_PAYLOAD`::      payload format is invalid

TRIGGER
~~~~~~~
Sends direct request to server side application.

Example
^^^^^^^
	{"trigger": {"event": "hello", "data": {"x": 1}}, "_id": "..."}

Payload
^^^^^^^
[horizontal]
'event':: name of the event which will be triggerred on the server side (required)
'data'::  request parameters (optional)

Errors
^^^^^^
[horizontal]
`INVALID_EVENT_NAME`:: no event name given
`ASSIGNATION_FAILED`:: there is no active worker which can handle specified request
`ACCESS_DENIED`::      current session is not authenticated for writing
`INVALID_PAYLOAD`::    payload format is invalid

LOGOUT
~~~~~~
Finishes current session and unsubscribes from all channels.

Example
^^^^^^^
	{"logout": true, "_id": "..."}

Errors
^^^^^^
[horizontal]
`ACCESS_DENIED`::   current session is not authenticated
`INVALID_PAYLOAD`:: payload format is invalid

DISCONNECT
~~~~~~~~~~
Safely closes connection.

Example
^^^^^^^
	{"disconnect": true, "_id": "..."}

Errors
^^^^^^
[horizontal]
`INVALID_PAYLOAD`:: payload format is invalid

MQ EXCHANGE SERVER
------------------
The MQ exhange Handles communication with the server side applications
and spreads the internal tasks across all nodes using the 'ZeroMQ'
library.

Messages format
~~~~~~~~~~~~~~~
This exchange server implements very simple text-based protocol. All
messages have the following format:

	CMD param1 ... paramN

Success responses
~~~~~~~~~~~~~~~~~
When command succeed, instant answer is sent to the client. Answer
has always the same, extremally simple format:

	OK

Errors handling
~~~~~~~~~~~~~~~
When error occurs, then server sends shor error message with appropriate
error code:

	ERR ERROR_ID

MQ EXCHANGE EVENTS
------------------
Here's the full list of events supported by the MQ exchange:

AUTH
~~~~
Authenticates current session for the specified user and vhost.

Format
^^^^^^
	AUTH vhost user secret

Example
^^^^^^^
	AUTH /echo joe 53cr3t
	
Payload
^^^^^^^
[horizontal]
'vhost'::  vhost on which user want to be authenticated
'user'::   name of the configured user you want to authenticate (required)
'secret':: authentication secret for specified user (optional)

Errors
^^^^^^
[horizontal]
`VHOST_NOT_FOUND`::     given vhost does not exist
`INVALID_VHOST`::       no vhost given or its format is invalid
`INVALID_CREDENTIALS`:: given secret is invalid
`USER_NOT_FOUND`::      given user does not exist
`INVALID_USER_NAME`::   no username given or its format is invalid
`INVALID_PAYLOAD`::     data format is invalid

BROADCAST
~~~~~~~~~
Broadcasts given JSON data on the specified channel.

Format
^^^^^^
	BROADCAST channel data

Example
^^^^^^^	
	BROADCAST foo {"event": "hello", "data": "world"}
	
Payload
^^^^^^^
[horizontal]
'channel':: channel name to which data should be broadcasted
'data'::    JSON-encoded data, should contain the `event` and `data` values

Errors
^^^^^^
[horizontal]
`INVALID_CHANNEL_NAME`:: no channel name given or its format is invalid
`CHANNEL_NOT_FOUND`::    given channel doesn't exist
`ACCESS_DENIED`::        current session is not authenticated for writing
`INVALID_PAYLOAD`::      payload format is invalid

DIRECT
~~~~~~
Sends direct message to specified client.

Format
^^^^^^
	DIRECT sid data

Example
^^^^^^^
	DIRECT abc...xyz {"event": "hello", "data": "world"}

Errors
^^^^^^
[horizontal]
`INVALID_SESSION_ID`:: no session id given or its format is invalid
`SESSION_NOT_FOUND`::  given session doesn't exist 
`ACCESS_DENIED`::      current session is not authenticated for writing
`INVALID_PAYLOAD`::    payload format is invalid

CLOSE
~~~~~
Closes current session and disconnects the client.

Format
^^^^^^
	CLOSE

Errors
^^^^^^
[horizontal]
`INVALID_PAYLOAD`:: payload format is invalid
	
EXAMPLES
--------
Simple server example:

	srv := webrocket.NewServer(":8080")
	echo, _ := srv.AddVhost("/echo")
	echo.AddUser("joe", "secret", PermRead|PermWrite)
	srv.ListenAndServe()

Accessing various data from the 'vhost':

	channels := echo.Channels()
	hello, _ := echo.GetChannel("hello")
	users := echo.Users()
	joe, _ := echo.GetUser("joe")
	conns := echo.Connections()
	ok := echo.IsRunning()
	
Managing users, setting permissions:

	echo.SetUserPermissions("joe", PermRead|PermWrite|PermManage)
	echo.DeleteUser("joe")
	
SEE ALSO
--------
*webrocket-server*(1), *webrocket-ctl*(1), *webrocket-monitor*(1)

AUTHOR
------
Chris Kowalik <chris@nu7hat.ch>
